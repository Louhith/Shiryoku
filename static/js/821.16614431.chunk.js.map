{"version":3,"file":"static/js/821.16614431.chunk.js","mappings":"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","sources":["config/index.ts","components/Home/Roadmap/RoadmapCard.tsx","pages/Home/Roadmaps/Roadmaps.tsx","utils/data.ts"],"sourcesContent":["/**\r\n * Application Configuration\r\n */\r\n\r\n// Dependencies\r\nimport CodelanceDevsLogo from '../assets/codelance-devs-logo.png';\r\n\r\nconst APP_PARTNERS: NavLinks[] = [\r\n\t{\r\n\t\tname: 'Codelance Devs',\r\n\t\turl: 'https://www.linkedin.com/company/codelance-devs/',\r\n\t\tlogo: CodelanceDevsLogo,\r\n\t},\r\n];\r\n\r\nconst config = {\r\n\tWEBSITE_URL: `${window.location.protocol}//${window.location.host}`,\r\n\tGITHUB_URL: 'https://github.com/kunalkeshan/Shiryoku',\r\n\tGITHUB_CONTRIBUTIONS_URL:\r\n\t\t'https://api.github.com/repos/kunalkeshan/Shiryoku/contributors',\r\n\tGITHUB_ISSUES_URL:\r\n\t\t'https://api.github.com/repos/kunalkeshan/Shiryoku/issues?state=open',\r\n\tAPP_PARTNERS,\r\n\tCONTACT: {\r\n\t\temail: 'kunalkeshan12@gmail.com',\r\n\t\tinstagram: 'https://www.instagram.com/kunalkeshan/',\r\n\t\tlinkedIn: 'https://www.linkedin.com/in/kunalkeshan/',\r\n\t\ttwitter: 'https://twitter.com/_kunalkeshan_',\r\n\t\tgithub: 'https://github.com/kunalkeshan',\r\n\t\tyoutube: 'https://www.youtube.com/channel/UCwVRztzBdqgB_Y9hkMX3lZA',\r\n\t},\r\n\tFORMSPREEE_CONTACT_FORM_ID: 'xbjbdlvj',\r\n};\r\n\r\nexport default config;\r\n","/**\r\n * Roadmap Card Component\r\n */\r\n\r\n// Dependencies\r\nimport React, { FC, PropsWithChildren } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport config from '../../../config';\r\n\r\nimport {\r\n\tCard,\r\n\tCardActions,\r\n\tCardContent,\r\n\tCardMedia,\r\n\tButton,\r\n\tTypography,\r\n\tGrid,\r\n} from '@mui/material';\r\n\r\nimport { useAppDispatch } from '../../../store';\r\nimport { showSnackbar } from '../../../store/features/app';\r\n\r\ninterface RoadmapCardProps extends PropsWithChildren, IRoadmap {}\r\n\r\nconst RoadmapCard: FC<RoadmapCardProps> = ({\r\n\tname,\r\n\tdescription,\r\n\tcover,\r\n\tid,\r\n}) => {\r\n\tconst dispatch = useAppDispatch();\r\n\tconst navigate = useNavigate();\r\n\tconst roadMapPath = `/roadmaps/${id}-${name\r\n\t\t.toLowerCase()\r\n\t\t.replace(/\\W+/gi, '-')}`;\r\n\tconst roadMapUrl = `${config.WEBSITE_URL}/#${roadMapPath}`;\r\n\r\n\tconst handleCopyToClipboard = async () => {\r\n\t\ttry {\r\n\t\t\tawait navigator.clipboard.writeText(roadMapUrl);\r\n\t\t\tdispatch(\r\n\t\t\t\tshowSnackbar({\r\n\t\t\t\t\tmessage: `${name} URL Copied to Clipboard!`,\r\n\t\t\t\t\ttype: 'success',\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tdispatch(\r\n\t\t\t\tshowSnackbar({\r\n\t\t\t\t\tmessage: `Unable to copy URL, try again later.`,\r\n\t\t\t\t\ttype: 'error',\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleNavigate = () => {\r\n\t\tnavigate(roadMapPath);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12} md={3}>\r\n\t\t\t<Card sx={{ maxWidth: 345 }}>\r\n\t\t\t\t<CardMedia\r\n\t\t\t\t\tcomponent='img'\r\n\t\t\t\t\talt={name}\r\n\t\t\t\t\theight='140'\r\n\t\t\t\t\timage={cover}\r\n\t\t\t\t/>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<Typography gutterBottom variant='h5' component='div'>\r\n\t\t\t\t\t\t{name}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography variant='body2' color='text.secondary'>\r\n\t\t\t\t\t\t{description}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</CardContent>\r\n\t\t\t\t<CardActions>\r\n\t\t\t\t\t<Button size='small' onClick={handleCopyToClipboard}>\r\n\t\t\t\t\t\tShare\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button size='small' onClick={handleNavigate}>\r\n\t\t\t\t\t\tLearn More\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CardActions>\r\n\t\t\t</Card>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default RoadmapCard;\r\n","/**\r\n * RoadMaps page\r\n */\r\n\r\n// Dependencies\r\nimport React, { useState, useEffect } from 'react';\r\nimport Data from '../../../utils/data';\r\n\r\nimport {\r\n\tTypography,\r\n\tstyled,\r\n\tBox,\r\n\tDivider,\r\n\tGrid,\r\n\tContainer,\r\n} from '@mui/material';\r\n\r\nimport RoadmapCard from '../../../components/Home/Roadmap/RoadmapCard';\r\n\r\nconst Roadmaps = () => {\r\n\tconst [roadMaps, setRoadMaps] = useState<IRoadmap[]>([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleFetchRoadmaps = async () => {\r\n\t\t\tconst data = await Data.Roadmaps.getRoadmaps();\r\n\t\t\tsetRoadMaps(data);\r\n\t\t};\r\n\t\tif (roadMaps.length === 0) handleFetchRoadmaps();\r\n\t}, [roadMaps.length]);\r\n\r\n\treturn (\r\n\t\t<Main>\r\n\t\t\t<Typography variant='h6' noWrap>\r\n\t\t\t\tRoadmaps{' '}\r\n\t\t\t\t<Typography variant='caption' component='span'>\r\n\t\t\t\t\t- organized approach to the resources.\r\n\t\t\t\t</Typography>\r\n\t\t\t</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<Container>\r\n\t\t\t\t<RoadMapContainer container>\r\n\t\t\t\t\t{roadMaps.length > 0 &&\r\n\t\t\t\t\t\troadMaps.map((data, index) => (\r\n\t\t\t\t\t\t\t<RoadmapCard key={index} {...data} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t</RoadMapContainer>\r\n\t\t\t</Container>\r\n\t\t</Main>\r\n\t);\r\n};\r\n\r\nconst Main = styled(Box)({});\r\n\r\nconst RoadMapContainer = styled(Grid)({\r\n\tmarginTop: '1em',\r\n\tgap: '1em',\r\n});\r\n\r\nexport default Roadmaps;\r\n","/**\r\n * Fetch in-app Data Util\r\n */\r\n\r\n// Dependencies\r\nimport allTags from '../data/tags.json';\r\nimport allResources from '../data/resources.json';\r\nimport allNotifications from '../data/notifications.json';\r\nimport allRoadMaps from '../data/roadmaps.json';\r\n\r\n// Get Read Notifications from Local Storage, parse it if it's there\r\n// If not there, then return an empty array.\r\nconst readNotifications: string[] = localStorage.getItem('readNotifications')\r\n\t? JSON.parse(localStorage.getItem('readNotifications') || '{}')\r\n\t: [];\r\n\r\ninterface ResourcesUtility {\r\n\tgetResources: (\r\n\t\tpage?: number,\r\n\t\tlimit?: number,\r\n\t\ttags?: Tags,\r\n\t\tsearch?: string\r\n\t) => Promise<Resource[]>;\r\n\tgetSingleResource: (name: string) => Promise<Resource> | any;\r\n\tgetTotalPages: () => Promise<number>;\r\n}\r\n\r\ninterface TagUtility {\r\n\tgetTags: () => Promise<Tags>;\r\n}\r\n\r\ninterface NotificationUtility {\r\n\tgetAllNotification: () => Promise<Notification[]>;\r\n\tupdateReadNotifications: (\r\n\t\tnotificationId: string\r\n\t) => Promise<string | Error | undefined>;\r\n}\r\n\r\ninterface RoadmapsUtility {\r\n\tgetRoadmaps: () => Promise<IRoadmap[]>;\r\n\tgetSingleRoadmap: (id: string) => Promise<IRoadmap | undefined>;\r\n\tgetResourcesOfRoadmap: (id: string) => Promise<Resource[]> | any;\r\n}\r\n\r\n/**\r\n * Data Utility Class\r\n */\r\nclass Data {\r\n\tstatic get Resources() {\r\n\t\tconst resourceUtility = {} as ResourcesUtility;\r\n\r\n\t\t/**\r\n\t\t * @description Get all resources in paginated manner\r\n\t\t * @param {number} page The current page\r\n\t\t * @param {number} limit The amount of items to display per page\r\n\t\t * @param {string[]} tags search for tags\r\n\t\t * @param {string} search search for resource by name, description or url\r\n\t\t * @returns {Resource[]} Array of resources\r\n\t\t */\r\n\t\tresourceUtility.getResources = async (\r\n\t\t\tpage = 1,\r\n\t\t\tlimit = 20,\r\n\t\t\ttags = [],\r\n\t\t\tsearch?: string\r\n\t\t) => {\r\n\t\t\tlet resources: Resource[] = allResources;\r\n\t\t\tif (search) {\r\n\t\t\t\tresources = resources.filter((resource) => {\r\n\t\t\t\t\tsearch = search!.replace(/([^a-zA-z0-9]+)/g, '');\r\n\t\t\t\t\tconst searchRegExp = new RegExp(search, 'ig');\r\n\t\t\t\t\tconst tags = resource.tags.join(' ');\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tsearchRegExp.test(resource.name) ||\r\n\t\t\t\t\t\tsearchRegExp.test(resource.description) ||\r\n\t\t\t\t\t\tsearchRegExp.test(resource.url) ||\r\n\t\t\t\t\t\ttags.match(searchRegExp)\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (tags?.length > 0) {\r\n\t\t\t\tresources = resources.filter((resource) => {\r\n\t\t\t\t\treturn resource.tags.find((tag) => tags.includes(tag));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn resources.slice((page - 1) * limit, page * limit);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @description Get's a single resources by it's name\r\n\t\t * @param {string} name name of the page looking for\r\n\t\t * @returns {Resource} Matching Resource\r\n\t\t */\r\n\t\tresourceUtility.getSingleResource = async (name: string) => {\r\n\t\t\treturn allResources.find((resource) => {\r\n\t\t\t\tconst url = new URL(resource.url).hostname.split('.').shift();\r\n\t\t\t\treturn url === name;\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tresourceUtility.getTotalPages = async () => {\r\n\t\t\treturn Math.ceil(allResources.length / 20);\r\n\t\t};\r\n\r\n\t\treturn resourceUtility;\r\n\t}\r\n\r\n\tstatic get Tags() {\r\n\t\tconst tagUtility = {} as TagUtility;\r\n\r\n\t\t/**\r\n\t\t * @description Get all tags\r\n\t\t * @returns {Tags} Tags\r\n\t\t */\r\n\t\ttagUtility.getTags = async () => {\r\n\t\t\treturn allTags;\r\n\t\t};\r\n\r\n\t\treturn tagUtility;\r\n\t}\r\n\r\n\tstatic get Notifications() {\r\n\t\tconst notificationUtility = {} as NotificationUtility;\r\n\r\n\t\t/**\r\n\t\t * @description Compares read notifications and new notifications,\r\n\t\t * returns true if already read and false if not for *read* property.\r\n\t\t * @returns {array} Array of All notifications\r\n\t\t */\r\n\t\tnotificationUtility.getAllNotification = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tallNotifications.forEach((notification: Notification | any) => {\r\n\t\t\t\t\tnotification.read = false;\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\treadNotifications.find(\r\n\t\t\t\t\t\t\t(readNotification) =>\r\n\t\t\t\t\t\t\t\treadNotification === notification.id\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tnotification.read = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn allNotifications as Notification[];\r\n\t\t\t} catch (error) {\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @description Update notification as read using notification Id\r\n\t\t * @param {string} notificationId notification Id to be added to read notifications\r\n\t\t * @returns {string} 'Notification marked as read!'\r\n\t\t */\r\n\t\tnotificationUtility.updateReadNotifications = async (\r\n\t\t\tnotificationId: string\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst readNotification: any = allNotifications.find(\r\n\t\t\t\t\t(notification: any) => notification.id === notificationId\r\n\t\t\t\t);\r\n\t\t\t\tif (!readNotification)\r\n\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t'Notification with give Id does not exist!'\r\n\t\t\t\t\t);\r\n\t\t\t\tif (readNotifications.find((noti) => noti === notificationId))\r\n\t\t\t\t\treturn;\r\n\t\t\t\treadNotifications.push(readNotification.id);\r\n\t\t\t\tlocalStorage.setItem(\r\n\t\t\t\t\t'readNotifications',\r\n\t\t\t\t\tJSON.stringify(readNotifications)\r\n\t\t\t\t);\r\n\t\t\t\treturn 'Notification marked as read!';\r\n\t\t\t} catch (error) {\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn notificationUtility;\r\n\t}\r\n\r\n\tstatic get Roadmaps() {\r\n\t\tconst roadmapsUtility = {} as RoadmapsUtility;\r\n\r\n\t\troadmapsUtility.getRoadmaps = async () => {\r\n\t\t\treturn allRoadMaps;\r\n\t\t};\r\n\r\n\t\troadmapsUtility.getSingleRoadmap = async (id: string) => {\r\n\t\t\treturn allRoadMaps.find((roadmap) => roadmap.id === id);\r\n\t\t};\r\n\r\n\t\troadmapsUtility.getResourcesOfRoadmap = async (id: string) => {\r\n\t\t\treturn allResources.filter((resource) =>\r\n\t\t\t\tresource.roadmap ? resource.roadmap.ids.includes(id) : false\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\treturn roadmapsUtility;\r\n\t}\r\n}\r\n\r\nexport default Data;\r\n"],"names":["APP_PARTNERS","name","url","logo","WEBSITE_URL","window","location","protocol","host","GITHUB_URL","GITHUB_CONTRIBUTIONS_URL","GITHUB_ISSUES_URL","CONTACT","email","instagram","linkedIn","twitter","github","youtube","FORMSPREEE_CONTACT_FORM_ID","description","cover","id","dispatch","useAppDispatch","navigate","useNavigate","roadMapPath","toLowerCase","replace","roadMapUrl","config","handleCopyToClipboard","navigator","clipboard","writeText","showSnackbar","message","type","Grid","item","xs","md","Card","sx","maxWidth","CardMedia","component","alt","height","image","CardContent","Typography","gutterBottom","variant","color","CardActions","Button","size","onClick","Main","styled","Box","RoadMapContainer","marginTop","gap","useState","roadMaps","setRoadMaps","useEffect","handleFetchRoadmaps","Data","data","length","noWrap","Divider","Container","container","map","index","readNotifications","localStorage","getItem","JSON","parse","resourceUtility","getResources","page","limit","tags","search","resources","allResources","filter","resource","searchRegExp","RegExp","join","test","match","find","tag","includes","slice","getSingleResource","URL","hostname","split","shift","getTotalPages","Math","ceil","tagUtility","getTags","allTags","notificationUtility","getAllNotification","allNotifications","notification","read","readNotification","Promise","reject","updateReadNotifications","notificationId","Error","noti","push","setItem","stringify","roadmapsUtility","getRoadmaps","allRoadMaps","getSingleRoadmap","roadmap","getResourcesOfRoadmap","ids"],"sourceRoot":""}