{"version":3,"file":"static/js/10.a035e16e.chunk.js","mappings":"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","sources":["components/Home/Resources/ResourceCard.tsx","utils/data.ts"],"sourcesContent":["/**\r\n * Resource Card\r\n */\r\n\r\n// Dependencies\r\nimport React, { FC, PropsWithChildren } from 'react';\r\n\r\nimport {\r\n\tTooltip,\r\n\tPaper,\r\n\tstyled,\r\n\tGrid,\r\n\tAvatar,\r\n\tBox,\r\n\tIconButton,\r\n\tTypography,\r\n\tStack,\r\n\tChip,\r\n} from '@mui/material';\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport GitHubIcon from '@mui/icons-material/GitHub';\r\nimport LanguageIcon from '@mui/icons-material/Language';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\n\r\nimport { useAppDispatch } from '../../../store';\r\nimport { showSnackbar } from '../../../store/features/app';\r\n\r\ninterface ResourceCardProps extends PropsWithChildren, Resource {}\r\n\r\nconst ResourceCard: FC<ResourceCardProps> = (props) => {\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst handleCopyToClipboard = async () => {\r\n\t\ttry {\r\n\t\t\tawait navigator.clipboard.writeText(props.url);\r\n\t\t\tdispatch(\r\n\t\t\t\tshowSnackbar({\r\n\t\t\t\t\tmessage: `${props.name} URL Copied to Clipboard!`,\r\n\t\t\t\t\ttype: 'success',\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tdispatch(\r\n\t\t\t\tshowSnackbar({\r\n\t\t\t\t\tmessage: `Unable to copy URL, try again later.`,\r\n\t\t\t\t\ttype: 'error',\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleShareResource = async () => {\r\n\t\ttry {\r\n\t\t\tconst shareData = {\r\n\t\t\t\turl: props.url,\r\n\t\t\t\ttitle: `${props.name} from Shiryoku by Kunal Keshan`,\r\n\t\t\t\ttext: props.description,\r\n\t\t\t};\r\n\r\n\t\t\tawait navigator.share(shareData);\r\n\t\t} catch (error) {}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ResourceContainer item xs={12} lg={5}>\r\n\t\t\t<ResourceBox elevation={3}>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tdisplay='flex'\r\n\t\t\t\t\talignItems='center'\r\n\t\t\t\t\twidth='100%'\r\n\t\t\t\t\tflexWrap='wrap'\r\n\t\t\t\t>\r\n\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\tsrc={props?.icon ?? props?.name}\r\n\t\t\t\t\t\tsx={{ mr: 2, cursor: 'pointer' }}\r\n\t\t\t\t\t\timgProps={{ loading: 'lazy' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='body1'\r\n\t\t\t\t\t\t\tfontWeight={600}\r\n\t\t\t\t\t\t\tmaxWidth='200px'\r\n\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t\t\t\tgap: '0.2em',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{props.name}\r\n\t\t\t\t\t\t\t<Tooltip title='Copy resource url to clipboard'>\r\n\t\t\t\t\t\t\t\t<ContentCopyIcon\r\n\t\t\t\t\t\t\t\t\tonClick={handleCopyToClipboard}\r\n\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\tfontSize: '1em',\r\n\t\t\t\t\t\t\t\t\t\tcursor: 'pointer',\r\n\t\t\t\t\t\t\t\t\t\tborderRadius: '50%',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\toverflow: 'hidden',\r\n\t\t\t\t\t\t\t\ttextOverflow: 'ellipsis',\r\n\t\t\t\t\t\t\t\twidth: '20ch',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\t\ttitle={props.description}\r\n\t\t\t\t\t\t\t\tarrow\r\n\t\t\t\t\t\t\t\tfollowCursor={true}\r\n\t\t\t\t\t\t\t\tplacement='bottom'\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Typography variant='caption' noWrap>\r\n\t\t\t\t\t\t\t\t\t{props.description}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<LinksBox>\r\n\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\ttitle='Visit Website'\r\n\t\t\t\t\t\t\tarrow\r\n\t\t\t\t\t\t\tfollowCursor={true}\r\n\t\t\t\t\t\t\tplacement='bottom'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<IconButton href={props.url} target='_blank'>\r\n\t\t\t\t\t\t\t\t<LanguageIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t{props.github && (\r\n\t\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\t\ttitle='View Open Source Code'\r\n\t\t\t\t\t\t\t\tarrow\r\n\t\t\t\t\t\t\t\tfollowCursor={true}\r\n\t\t\t\t\t\t\t\tplacement='bottom'\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\thref={props?.github}\r\n\t\t\t\t\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<GitHubIcon />\r\n\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\ttitle={`Share ${props.name}`}\r\n\t\t\t\t\t\t\tarrow\r\n\t\t\t\t\t\t\tfollowCursor={true}\r\n\t\t\t\t\t\t\tplacement='bottom'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<IconButton onClick={handleShareResource}>\r\n\t\t\t\t\t\t\t\t<ShareIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</LinksBox>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Stack direction='row' flexWrap='wrap' mt={2}>\r\n\t\t\t\t\t{props.tags.map((tag) => (\r\n\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\tlabel={tag}\r\n\t\t\t\t\t\t\tkey={tag}\r\n\t\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\tfontSize: '0.6rem',\r\n\t\t\t\t\t\t\t\tpadding: '0.1em 0.2em',\r\n\t\t\t\t\t\t\t\tfontWeight: 'bold',\r\n\t\t\t\t\t\t\t\tmargin: '0.2em',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Stack>\r\n\t\t\t</ResourceBox>\r\n\t\t</ResourceContainer>\r\n\t);\r\n};\r\n\r\nconst ResourceContainer = styled(Grid)({});\r\n\r\nconst ResourceBox = styled(Paper)({\r\n\tpadding: '1em',\r\n\theight: '100%',\r\n});\r\n\r\nconst LinksBox = styled(Box)({\r\n\tdisplay: 'flex',\r\n\talignItems: 'center',\r\n\tjustifyContent: 'center',\r\n\talignSelf: 'flex-end',\r\n\tmarginLeft: 'auto',\r\n});\r\n\r\nexport default ResourceCard;\r\n","/**\r\n * Fetch in-app Data Util\r\n */\r\n\r\n// Dependencies\r\nimport allTags from '../data/tags.json';\r\nimport allResources from '../data/resources.json';\r\nimport allNotifications from '../data/notifications.json';\r\nimport allRoadMaps from '../data/roadmaps.json';\r\n\r\n// Get Read Notifications from Local Storage, parse it if it's there\r\n// If not there, then return an empty array.\r\nconst readNotifications: string[] = localStorage.getItem('readNotifications')\r\n\t? JSON.parse(localStorage.getItem('readNotifications') || '{}')\r\n\t: [];\r\n\r\ninterface ResourcesUtility {\r\n\tgetResources: (\r\n\t\tpage?: number,\r\n\t\tlimit?: number,\r\n\t\ttags?: Tags,\r\n\t\tsearch?: string\r\n\t) => Promise<Resource[]>;\r\n\tgetSingleResource: (name: string) => Promise<Resource> | any;\r\n\tgetTotalPages: () => Promise<number>;\r\n}\r\n\r\ninterface TagUtility {\r\n\tgetTags: () => Promise<Tags>;\r\n}\r\n\r\ninterface NotificationUtility {\r\n\tgetAllNotification: () => Promise<Notification[]>;\r\n\tupdateReadNotifications: (\r\n\t\tnotificationId: string\r\n\t) => Promise<string | Error | undefined>;\r\n}\r\n\r\ninterface RoadmapsUtility {\r\n\tgetRoadmaps: () => Promise<IRoadmap[]>;\r\n\tgetSingleRoadmap: (id: string) => Promise<IRoadmap | undefined>;\r\n\tgetResourcesOfRoadmap: (id: string) => Promise<Resource[]> | any;\r\n}\r\n\r\n/**\r\n * Data Utility Class\r\n */\r\nclass Data {\r\n\tstatic get Resources() {\r\n\t\tconst resourceUtility = {} as ResourcesUtility;\r\n\r\n\t\t/**\r\n\t\t * @description Get all resources in paginated manner\r\n\t\t * @param {number} page The current page\r\n\t\t * @param {number} limit The amount of items to display per page\r\n\t\t * @param {string[]} tags search for tags\r\n\t\t * @param {string} search search for resource by name, description or url\r\n\t\t * @returns {Resource[]} Array of resources\r\n\t\t */\r\n\t\tresourceUtility.getResources = async (\r\n\t\t\tpage = 1,\r\n\t\t\tlimit = 20,\r\n\t\t\ttags = [],\r\n\t\t\tsearch?: string\r\n\t\t) => {\r\n\t\t\tlet resources: Resource[] = allResources;\r\n\t\t\tif (search) {\r\n\t\t\t\tresources = resources.filter((resource) => {\r\n\t\t\t\t\tsearch = search!.replace(/([^a-zA-z0-9]+)/g, '');\r\n\t\t\t\t\tconst searchRegExp = new RegExp(search, 'ig');\r\n\t\t\t\t\tconst tags = resource.tags.join(' ');\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tsearchRegExp.test(resource.name) ||\r\n\t\t\t\t\t\tsearchRegExp.test(resource.description) ||\r\n\t\t\t\t\t\tsearchRegExp.test(resource.url) ||\r\n\t\t\t\t\t\ttags.match(searchRegExp)\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (tags?.length > 0) {\r\n\t\t\t\tresources = resources.filter((resource) => {\r\n\t\t\t\t\treturn resource.tags.find((tag) => tags.includes(tag));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn resources.slice((page - 1) * limit, page * limit);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @description Get's a single resources by it's name\r\n\t\t * @param {string} name name of the page looking for\r\n\t\t * @returns {Resource} Matching Resource\r\n\t\t */\r\n\t\tresourceUtility.getSingleResource = async (name: string) => {\r\n\t\t\treturn allResources.find((resource) => {\r\n\t\t\t\tconst url = new URL(resource.url).hostname.split('.').shift();\r\n\t\t\t\treturn url === name;\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tresourceUtility.getTotalPages = async () => {\r\n\t\t\treturn Math.ceil(allResources.length / 20);\r\n\t\t};\r\n\r\n\t\treturn resourceUtility;\r\n\t}\r\n\r\n\tstatic get Tags() {\r\n\t\tconst tagUtility = {} as TagUtility;\r\n\r\n\t\t/**\r\n\t\t * @description Get all tags\r\n\t\t * @returns {Tags} Tags\r\n\t\t */\r\n\t\ttagUtility.getTags = async () => {\r\n\t\t\treturn allTags;\r\n\t\t};\r\n\r\n\t\treturn tagUtility;\r\n\t}\r\n\r\n\tstatic get Notifications() {\r\n\t\tconst notificationUtility = {} as NotificationUtility;\r\n\r\n\t\t/**\r\n\t\t * @description Compares read notifications and new notifications,\r\n\t\t * returns true if already read and false if not for *read* property.\r\n\t\t * @returns {array} Array of All notifications\r\n\t\t */\r\n\t\tnotificationUtility.getAllNotification = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tallNotifications.forEach((notification: Notification | any) => {\r\n\t\t\t\t\tnotification.read = false;\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\treadNotifications.find(\r\n\t\t\t\t\t\t\t(readNotification) =>\r\n\t\t\t\t\t\t\t\treadNotification === notification.id\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tnotification.read = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn allNotifications as Notification[];\r\n\t\t\t} catch (error) {\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @description Update notification as read using notification Id\r\n\t\t * @param {string} notificationId notification Id to be added to read notifications\r\n\t\t * @returns {string} 'Notification marked as read!'\r\n\t\t */\r\n\t\tnotificationUtility.updateReadNotifications = async (\r\n\t\t\tnotificationId: string\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst readNotification: any = allNotifications.find(\r\n\t\t\t\t\t(notification: any) => notification.id === notificationId\r\n\t\t\t\t);\r\n\t\t\t\tif (!readNotification)\r\n\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t'Notification with give Id does not exist!'\r\n\t\t\t\t\t);\r\n\t\t\t\tif (readNotifications.find((noti) => noti === notificationId))\r\n\t\t\t\t\treturn;\r\n\t\t\t\treadNotifications.push(readNotification.id);\r\n\t\t\t\tlocalStorage.setItem(\r\n\t\t\t\t\t'readNotifications',\r\n\t\t\t\t\tJSON.stringify(readNotifications)\r\n\t\t\t\t);\r\n\t\t\t\treturn 'Notification marked as read!';\r\n\t\t\t} catch (error) {\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn notificationUtility;\r\n\t}\r\n\r\n\tstatic get Roadmaps() {\r\n\t\tconst roadmapsUtility = {} as RoadmapsUtility;\r\n\r\n\t\troadmapsUtility.getRoadmaps = async () => {\r\n\t\t\treturn allRoadMaps;\r\n\t\t};\r\n\r\n\t\troadmapsUtility.getSingleRoadmap = async (id: string) => {\r\n\t\t\treturn allRoadMaps.find((roadmap) => roadmap.id === id);\r\n\t\t};\r\n\r\n\t\troadmapsUtility.getResourcesOfRoadmap = async (id: string) => {\r\n\t\t\treturn allResources.filter((resource) =>\r\n\t\t\t\tresource.roadmap ? resource.roadmap.ids.includes(id) : false\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\treturn roadmapsUtility;\r\n\t}\r\n}\r\n\r\nexport default Data;\r\n"],"names":["ResourceContainer","styled","Grid","ResourceBox","Paper","padding","height","LinksBox","Box","display","alignItems","justifyContent","alignSelf","marginLeft","props","dispatch","useAppDispatch","handleCopyToClipboard","navigator","clipboard","writeText","url","showSnackbar","message","name","type","handleShareResource","shareData","title","text","description","share","item","xs","lg","elevation","width","flexWrap","src","icon","sx","mr","cursor","imgProps","loading","variant","fontWeight","maxWidth","gap","onClick","fontSize","borderRadius","style","overflow","textOverflow","arrow","followCursor","placement","noWrap","href","target","github","direction","mt","tags","map","tag","label","size","margin","readNotifications","localStorage","getItem","JSON","parse","Data","resourceUtility","getResources","page","limit","search","resources","allResources","filter","resource","replace","searchRegExp","RegExp","join","test","match","length","find","includes","slice","getSingleResource","URL","hostname","split","shift","getTotalPages","Math","ceil","tagUtility","getTags","allTags","notificationUtility","getAllNotification","allNotifications","notification","read","readNotification","id","Promise","reject","updateReadNotifications","notificationId","Error","noti","push","setItem","stringify","roadmapsUtility","getRoadmaps","allRoadMaps","getSingleRoadmap","roadmap","getResourcesOfRoadmap","ids"],"sourceRoot":""}